#!/usr/bin/env node

var fs = require("fs");

function checkRepoTypes(repo) {
	let types = {}

	Object.entries(repo).map(([key, obj]) => checkKeyTypes(key, obj, types, ""));
	//console.log(types);
}

function checkKeyTypes(main, obj, types, path) {
	//console.log(main, path, Array.isArray(obj) ? "[]" : typeof obj, types[path])
	if (Array.isArray(obj)) {
		if (types[path] && types[path] != "[]") {
			throw new Error(`Unexpected type ${typeof obj} at path ${main}${path}. Expected type ${types[path]}`);
		}
		types[path] = "[]";
		for (let o of obj) {
			checkKeyTypes(main, o, types, path + "[]");
		}
		return;
	}
	if (types[path] && typeof obj != types[path]) {
		throw new Error(`Unexpected type ${typeof o} at path ${main}${path}. Expected type ${types[path]}`);
	}
	types[path] = typeof obj;
	if (typeof obj == "object") {
		Object.entries(obj).map(([key, value]) => {
			checkKeyTypes(main, value, types, `${path}.${key}`);
		});
	}
}



console.log("Checking that jsrepository is valid json...");
var jsRepo = JSON.parse(fs.readFileSync(__dirname + "/jsrepository.json"));
console.log("Validating regexes...")
var count = 0;
for (var i in jsRepo) {
	var types = ["uri", "filecontent", "filename", "filecontentreplace"];
	for (var j in types) {
		for (var k in jsRepo[i].extractors[types[j]]) {
			try {
				var restring = jsRepo[i].extractors[types[j]][k];
				count++;
				if (types[j] == "filecontentreplace") {
					var ar = /^\/(.*[^\\])\/([^\/]+)\/$/.exec(restring);
					if (ar == null) {
						console.warn("RegExp error - should be on format \"/search/replacement/\"", i, types[j], k);
						process.exit(1);
					}
					restring = ar[1];
				}
				var r = new RegExp(restring);
				var cre = restring.replace(/\\\(/g, "").replace(/\(\?:/g, "").split("(")[1];
				if (i != "dont check" && types[j] !== "filecontentreplace" && (!cre || cre.indexOf("§§version§§") !== 0)) {
					throw new Error("First capture must be §§version§§ for " + i + ": " + restring);
				}


			} catch(e) {
				console.warn("RegExp error ", i, types[j], k);
				throw e;
			}
		}
	}  
}
console.log(count + " regexes validated.")
console.log("Check repo consistency for jsRepo...")
checkRepoTypes(jsRepo);
console.log("Done")




console.log("Checking that npmrepository is valid json...");
var npmData = fs.readFileSync(__dirname + "/npmrepository.json", "utf-8");
var npmRepo = JSON.parse(npmData);
var k = Object.keys(npmRepo).filter(component => npmRepo[component].vulnerabilities.some(v => !v.below))
if (k.length > 0) throw new Error('Components ' + k.map(c => '"' + c + '"').join(', ') + ' are missing "below"');

console.log("Looking for duplicate keys in npmrepo ...");
Object.keys(npmRepo).map(k => {
	if (npmData.split('"' + k + '"').length > 2) {
		throw new Error("Duplicate key for " + k);
	}
})

console.log("Check repo consistency for npmRepo...")
checkRepoTypes(npmRepo);
console.log("Done")
console.log("Success");
